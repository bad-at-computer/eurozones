@page "/"
@using System.Text.Json
@using EuropeanStates.Data
@using EuropeanStates.Services
@using GeoJSON.Net.Feature
@using GeoJSON.Net.Geometry
@using Newtonsoft.Json

@inject CountryService CountryService
@inject NavigationManager NavigationManager


<PageTitle>European States</PageTitle>

<MudText Typo="Typo.h1">
    Europe: Money, Borders, & Power
</MudText>

<MudText Typo="Typo.body1">
    As a new resident of Europe, I wanted to better understand why nations like Denmark are members of the European Union but do not use the Euro for currency.
    While looking into this more, I learned about other complicated memberships like Schengen, NATO, and the European Economic Area.
    I decided the best way to visualize this information would be in a dynamic table.
</MudText>

<MudPaper Class="pa-4 justify-center d-flex my-2" Elevation="0">
    <RealTimeMap @ref="_realTimeMap" 
                 Parameters="@parameters"
                 OnAfterMapLoaded="OnAfterMapLoaded"
                 height="460px" 
                 width="736px"></RealTimeMap>
</MudPaper>

<MudSimpleTable Class="my-2" Style="overflow-x: auto;" Elevation="0" Outlined="true" Striped="true">
    <tbody>
    <tr>
        <td>
            <MudCheckBox @bind-Value="CheckBoxIsEU" Change="@LoadCountries" Label="European Union (EU)"></MudCheckBox>
        </td>
        <td>
            <MudText Typo="Typo.body1">
                A political and economic union of European countries that collaborate on policies, trade, and governance, with shared institutions and laws.
            </MudText>
        </td>
    </tr>
    <tr>
        <td>
            <MudCheckBox @bind-Value="CheckBoxIsEEA" Label="European Economic Area (EEA)"></MudCheckBox>
        </td>
        <td>
            <MudText Typo="Typo.body1">
                An agreement that extends the EU’s single market to include non-EU countries, allowing free movement of goods, services, capital, and people.
            </MudText>
        </td>
    </tr>
    <tr>
        <td>
            <MudCheckBox @bind-Value="CheckBoxIsEurozone" Label="Eurozone"></MudCheckBox>
        </td>
        <td>
            <MudText Typo="Typo.body1">
                A group of EU countries that have adopted the Euro as their official currency and coordinate monetary policy through the European Central Bank.
            </MudText>
        </td>
    </tr>
    <tr>
        <td>
            <MudCheckBox @bind-Value="CheckBoxIsSchengen" Label="Schengen Area"></MudCheckBox>
        </td>
        <td>
            <MudText Typo="Typo.body1">
                A zone of European countries that have abolished internal border controls, allowing free and unrestricted movement of people across member states.
            </MudText>
        </td>
    </tr>
    <tr>
        <td>
            <MudCheckBox @bind-Value="CheckBoxIsNato" Label="NATO"></MudCheckBox>
        </td>
        <td>
            <MudText Typo="Typo.body1">
                A military alliance of countries from Europe and North America that provides collective defense and security cooperation against threats.
            </MudText>
        </td>
    </tr>
    </tbody>
</MudSimpleTable>

<MudTable Items="@Countries" Class="my-5">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Currency</MudTh>
        <MudTh>Memberships</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Currency">@context.CurrencyAbbreviation</MudTd>
        <MudTd DataLabel="Memberships">@context.GetMemberships()</MudTd>
    </RowTemplate>
</MudTable>

<MudPaper>
    
</MudPaper>

@code{
    
    RealTimeMap _realTimeMap = new();
    private List<Countries> Countries { get; set; } = new List<Countries>();

    private bool _checkBoxIsEU { get; set; } = false;
    private bool _checkBoxIsEEA { get; set; } = false;
    private bool _checkBoxIsEurozone { get; set; } = false;
    private bool _checkBoxIsSchengen { get; set; } = false;
    private bool _checkBoxIsNato { get; set; } = false;
    
    private bool CheckBoxIsEU
    {
        get => _checkBoxIsEU;
        set
        {
            _checkBoxIsEU = value;
            LoadCountries();
        }
    }

    private bool CheckBoxIsEEA
    {
        get => _checkBoxIsEEA;
        set
        {
            _checkBoxIsEEA = value;
            LoadCountries();
        }
    }

    private bool CheckBoxIsEurozone
    {
        get => _checkBoxIsEurozone;
        set
        {
            _checkBoxIsEurozone = value;
            LoadCountries();
        }
    }

    private bool CheckBoxIsSchengen
    {
        get => _checkBoxIsSchengen;
        set
        {
            _checkBoxIsSchengen = value;
            LoadCountries();
        }
    }

    private bool CheckBoxIsNato
    {
        get => _checkBoxIsNato;
        set
        {
            _checkBoxIsNato = value;
            LoadCountries();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        Countries = CountryService.GetCountries();
        await LoadCountries();
    }

    public List<List<double[]>> CurrentPolygonCoordinates = new List<List<double[]>>();

    private async Task LoadCountries()
    {
        Countries = CountryService.FilterCountries(_checkBoxIsEU, _checkBoxIsEEA, _checkBoxIsEurozone, _checkBoxIsSchengen, _checkBoxIsNato);
        await LoadGeoJsonPolygons();
    }

    private async Task LoadGeoJsonPolygons()
    {
        CurrentPolygonCoordinates = new List<List<double[]>>();
        
        string geoJsonPath = Path.Combine("wwwroot", "input", "europe_base.json");
        string geoJsonString = await File.ReadAllTextAsync(geoJsonPath);

        var featureCollection = JsonConvert.DeserializeObject<FeatureCollection>(geoJsonString);

        foreach (var feature in featureCollection.Features)
        {
            if (!Countries.Any(c => c.Name.Equals(feature.Properties["NAME"]?.ToString(), StringComparison.OrdinalIgnoreCase)))
            {
                continue;
            }
            
            if (feature.Geometry is Polygon polygon)
            {
                ExtractPolygonCoordinates(polygon);
            }
            else if (feature.Geometry is MultiPolygon multiPolygon)
            {
                foreach (var subPolygon in multiPolygon.Coordinates)
                {
                    ExtractPolygonCoordinates(subPolygon);
                }
            }
        }

        await _realTimeMap.Geometric.DisplayPolygonsFromArray.deleteAll();
        await _realTimeMap.Geometric.DisplayPolygonsFromArray.add(CurrentPolygonCoordinates);
    }

    private void ExtractPolygonCoordinates(Polygon polygon)
    {
        if (polygon.Coordinates.Count <= 0) return; // Outer ring only
        var outerRing = polygon.Coordinates.First();
        var coordinateList = outerRing.Coordinates
            .Select(coord => new double[] { coord.Latitude, coord.Longitude })
            .ToList();
        CurrentPolygonCoordinates.Add(coordinateList);
    }

    RealTimeMap.LoadParameters parameters = new RealTimeMap.LoadParameters()
    {
        basemap = new RealTimeMap.Basemap() 
        {
            basemapLayers = new List<RealTimeMap.BasemapLayer>()
            {
                new RealTimeMap.BasemapLayer()
                {
                    url = "https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png",
                    attribution = "&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attributions\">CARTO</a>",
                    title = "Open Street Map",
                    detectRetina = true
                }
            }
        },
        location = new()
        {
            latitude = 53.54,
            longitude = 9.98
        },
        zoomLevel = 3,
        
    };
    
    public async Task OnAfterMapLoaded(RealTimeMap.MapEventArgs args)
    {
        await _realTimeMap.Geometric.DisplayPolygonsFromArray.add(CurrentPolygonCoordinates);
    }

}