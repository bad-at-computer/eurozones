@page "/"
@using EuropeanStates.Data
@using EuropeanStates.Services
@using GeoJSON.Net.Feature
@using GeoJSON.Net.Geometry
@using Newtonsoft.Json

@inject CountryService CountryService
@inject StringsService StringsService

<PageTitle>@StringsService.TitleEurozones</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12">
        <MudPaper Class="pa-4 mt-2">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Class="mb-2">
                <MudText Typo="Typo.h3">Eurozones</MudText>
                <MudSpacer/>
                <MudLink Href="https://badatcomputer.net/eurozones" Target="_blank">
                    <MudAvatar Rounded="true" Size="Size.Medium">
                        <MudImage Src="logo.png"/>
                    </MudAvatar>
                </MudLink>
            </MudStack>
            <MudText Typo="Typo.h6">
                A visual guide to Europe's money, borders, and power structures.
            </MudText>
            <MudText Typo="Typo.body1">@StringsService.AppDescription</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <RealTimeMap @ref="_realTimeMap"
                     Parameters="@_parameters"
                     OnAfterMapLoaded="OnAfterMapLoaded"
                     height="400px"
                     width="calc(100vw - 3rem)">
        </RealTimeMap>
        @if (LoadingMap)
        {
            <MudProgressLinear Indeterminate="true"/>
        }
        else
        {
            <MudProgressLinear Value="100"/>
        }
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="pa-2 ma-0">
            <MudGrid Justify="Justify.FlexStart">
                <MembershipCheckbox LabelContent="@StringsService.LabelEU"
                                    InformationContent="@StringsService.DescriptionEU"
                                    IsDisabled="LoadingMap"
                                    ToggleCheckboxCallback="CheckBoxIsEu"/>
                <MembershipCheckbox LabelContent="@StringsService.LabelEEA"
                                    InformationContent="@StringsService.DescriptionEEA"
                                    IsDisabled="LoadingMap"
                                    ToggleCheckboxCallback="CheckBoxIsEea"/>
                <MembershipCheckbox LabelContent="@StringsService.LabelEurozone"
                                    IsDisabled="LoadingMap"
                                    InformationContent="@StringsService.DescriptionEurozone"
                                    ToggleCheckboxCallback="CheckBoxIsEurozone"/>
                <MembershipCheckbox LabelContent="@StringsService.LabelSchengen"
                                    IsDisabled="LoadingMap"
                                    InformationContent="@StringsService.DescriptionSchengen"
                                    ToggleCheckboxCallback="CheckBoxIsSchengen"/>
                <MembershipCheckbox LabelContent="@StringsService.LabelNATO"
                                    IsDisabled="LoadingMap"
                                    InformationContent="@StringsService.DescriptionNATO"
                                    ToggleCheckboxCallback="CheckBoxIsNato"/>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudTable Items="@Countries" Class="my-4">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Member Nations</MudText>
                <MudSpacer/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Currency</MudTh>
                <MudTh>Memberships</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Currency">@context.CurrencyAbbreviation</MudTd>
                <MudTd DataLabel="Memberships">@context.GetMemberships()</MudTd>
            </RowTemplate>
        </MudTable>
    </MudItem>
    <MudItem xs="12" Class="footer pa-4 ma-0 d-flex flex-wrap justify-center align-center">
        <MudText Typo="Typo.body2" Class="mx-2 my-1 text-center">
            © 2021 – 2025
        </MudText>
        <MudText Typo="Typo.body2" Class="mx-2 my-1 text-center">
            <a href="https://badatcomputer.net/" target="_blank">badatcomputer.net</a>
        </MudText>
        <MudText Typo="Typo.body2" Class="mx-2 my-1 text-center">
            <a href="https://badatcomputer.net/#contact-home" target="_blank">Contact</a>
        </MudText>
    </MudItem>
</MudGrid>


@code{

    RealTimeMap _realTimeMap = new();
    private List<Countries> Countries { get; set; } = new List<Countries>();
    private bool LoadingMap { get; set; }

    private bool _checkBoxIsEu { get; set; } = false;
    private bool _checkBoxIsEea { get; set; } = false;
    private bool _checkBoxIsEurozone { get; set; } = false;
    private bool _checkBoxIsSchengen { get; set; } = false;
    private bool _checkBoxIsNato { get; set; } = false;


    private async Task<bool> CheckBoxIsEu(bool checkBox)
    {
        LoadingMap = true;
        _checkBoxIsEu = checkBox;
        await LoadCountries();
        LoadingMap = false;
        return checkBox;
    }

    private async Task<bool> CheckBoxIsEea(bool checkBox)
    {
        LoadingMap = true;
        _checkBoxIsEea = checkBox;
        await LoadCountries();
        LoadingMap = false;
        return checkBox;
    }

    private async Task<bool> CheckBoxIsEurozone(bool checkBox)
    {
        LoadingMap = true;
        _checkBoxIsEurozone = checkBox;
        await LoadCountries();
        LoadingMap = false;
        return checkBox;
    }

    private async Task<bool> CheckBoxIsSchengen(bool checkBox)
    {
        LoadingMap = true;
        _checkBoxIsSchengen = checkBox;
        await LoadCountries();
        LoadingMap = false;
        return checkBox;
    }

    private async Task<bool> CheckBoxIsNato(bool checkBox)
    {
        LoadingMap = true;
        _checkBoxIsNato = checkBox;
        await LoadCountries();
        LoadingMap = false;
        return checkBox;
    }

    protected override async Task OnInitializedAsync()
    {
        LoadingMap = true;
        Countries = CountryService.GetCountries();
        await LoadCountries();
        LoadingMap = false;
    }

    private List<List<double[]>> CurrentPolygonCoordinates { get; set; } = new List<List<double[]>>();

    private async Task LoadCountries()
    {
        Countries = CountryService.FilterCountries(_checkBoxIsEu, _checkBoxIsEea, _checkBoxIsEurozone, _checkBoxIsSchengen, _checkBoxIsNato);
        await LoadGeoJsonPolygons();
    }

    private async Task LoadGeoJsonPolygons()
    {
        CurrentPolygonCoordinates = new List<List<double[]>>();

        var geoJsonPath = Path.Combine("wwwroot", "input", "europe_base.json");
        var geoJsonString = await File.ReadAllTextAsync(geoJsonPath);

        var featureCollection = JsonConvert.DeserializeObject<FeatureCollection>(geoJsonString);

        foreach (var feature in featureCollection.Features)
        {
            if (!Countries.Any(c => c.Name.Equals(feature.Properties["NAME"]?.ToString(), StringComparison.OrdinalIgnoreCase)))
            {
                continue;
            }

            switch (feature.Geometry)
            {
                case Polygon polygon:
                    ExtractPolygonCoordinates(polygon);
                    break;
                case MultiPolygon multiPolygon:
                {
                    foreach (var subPolygon in multiPolygon.Coordinates)
                    {
                        ExtractPolygonCoordinates(subPolygon);
                    }

                    break;
                }
            }
        }

        await _realTimeMap.Geometric.DisplayPolygonsFromArray.deleteAll();
        await _realTimeMap.Geometric.DisplayPolygonsFromArray.add(CurrentPolygonCoordinates);
    }

    private void ExtractPolygonCoordinates(Polygon polygon)
    {
        if (polygon.Coordinates.Count <= 0) return; // Outer ring only
        var outerRing = polygon.Coordinates.First();
        var coordinateList = outerRing.Coordinates
            .Select(coord => new double[] { coord.Latitude, coord.Longitude })
            .ToList();
        CurrentPolygonCoordinates.Add(coordinateList);
    }

    private RealTimeMap.LoadParameters _parameters = new RealTimeMap.LoadParameters()
    {
        basemap = new RealTimeMap.Basemap()
        {
            basemapLayers = new List<RealTimeMap.BasemapLayer>()
            {
                new RealTimeMap.BasemapLayer()
                {
                    url = "https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png",
                    attribution = "&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attributions\">CARTO</a>",
                    title = "Open Street Map",
                    detectRetina = true
                }
            }
        },
        location = new()
        {
            latitude = 53.54,
            longitude = 9.98
        },
        zoomLevel = 3,
    };

    public async Task OnAfterMapLoaded(RealTimeMap.MapEventArgs args)
    {
        await _realTimeMap.Geometric.DisplayPolygonsFromArray.add(CurrentPolygonCoordinates);
    }

}